- name: Create /var/lib/kubernetes dir
  file:
    path: /var/lib/kubernetes
    state: directory

- name: Copy controlplane CSR configs
  template:
    src: "{{ item }}.j2"
    dest: "/var/lib/kubernetes/{{ item }}"
  loop:
    - kube-controller-manager-csr.json
    - kube-scheduler-csr.json
    - kubernetes-csr.json
    - service-account-csr.json
    - front-proxy-csr.json

- name: Generate kube-controller-manager cert and key
  shell:
    cmd: >
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem 
      -config=ca-config.json -profile=kubernetes
      kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
    chdir: /var/lib/kubernetes
    creates: /var/lib/kubernetes/kube-controller-manager.pem
  register: kube_controller_manager_cert

- name: Generate kube-scheduler cert and key
  shell:
    cmd: >
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem
      -config=ca-config.json -profile=kubernetes 
      kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    chdir: /var/lib/kubernetes
    creates: /var/lib/kubernetes/kube-scheduler.pem
  register: kube_scheduler_cert

- name: Generate kube-api-server cert and key
  shell:
    cmd: >
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem
      -config=ca-config.json
      -hostname={{ kube_api_server_addresses }},{{ k8s_loadbalancer }},{{ kube_api_server_hostnames }}
      -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
    chdir: /var/lib/kubernetes
    creates: /var/lib/kubernetes/kubernetes.pem

- name: Generate service-account cert and key
  shell:
    cmd: >
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json
      -profile=kubernetes service-account-csr.json | cfssljson -bare service-account
    chdir: /var/lib/kubernetes
    creates: /var/lib/kubernetes/service-account.pem

- name: Generate front-proxy cert and key
  shell:
    cmd: >
      cfssl gencert -ca=front-proxy-ca.pem -ca-key=front-proxy-ca-key.pem -config=ca-config.json
      -profile=kubernetes front-proxy-csr.json | cfssljson -bare front-proxy
    chdir: /var/lib/kubernetes
    creates: /var/lib/kubernetes/front-proxy.pem

- name: Generate kube-controller-manager kubeconfig. Step 1
  command:
    cmd: >
      kubectl config set-cluster {{ k8s_cluster_name }} --certificate-authority=ca.pem 
      --embed-certs=true --server=https://127.0.0.1:6443
      --kubeconfig=kube-controller-manager.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_controller_manager_cert is changed

- name: Generate kube-controller-manager kubeconfig. Step 2
  command:
    cmd: >
      kubectl config set-credentials system:kube-controller-manager 
      --client-certificate=kube-controller-manager.pem
      --client-key=kube-controller-manager-key.pem --embed-certs=true
      --kubeconfig=kube-controller-manager.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_controller_manager_cert is changed

- name: Generate kube-controller-manager kubeconfig. Step 3
  command:
    cmd: >
      kubectl config set-context default --cluster={{ k8s_cluster_name }}
      --user=system:kube-controller-manager
      --kubeconfig=kube-controller-manager.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_controller_manager_cert is changed

- name: Generate kube-controller-manager kubeconfig. Step 4
  command:
    cmd: >
      kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_controller_manager_cert is changed

- name: Generate kube-scheduler kubeconfig. Step 1
  command:
    cmd: >
      kubectl config set-cluster {{ k8s_cluster_name }}
      --certificate-authority=ca.pem --embed-certs=true
      --server=https://127.0.0.1:6443 --kubeconfig=kube-scheduler.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_scheduler_cert is changed

- name: Generate kube-scheduler kubeconfig. Step 2
  command:
    cmd: >
      kubectl config set-credentials system:kube-scheduler
      --client-certificate=kube-scheduler.pem
      --client-key=kube-scheduler-key.pem --embed-certs=true
      --kubeconfig=kube-scheduler.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_scheduler_cert is changed

- name: Generate kube-scheduler kubeconfig. Step 3
  command:
    cmd: >
      kubectl config set-context default --cluster={{ k8s_cluster_name }}
      --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_scheduler_cert is changed

- name: Generate kube-scheduler kubeconfig. Step 4
  command:
    cmd: kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
    chdir: /var/lib/kubernetes
  when: kube_scheduler_cert is changed
